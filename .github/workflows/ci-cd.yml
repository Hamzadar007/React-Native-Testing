name: CI/CD Pipeline

on:
  pull_request:
    branches: [ main, master ]
  push:
    branches: [ main, master ]

jobs:
  # Job for pull requests - runs tests, linting, and formatting
  pr-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Run ESLint
      run: yarn lint:fix
      
    - name: Check Prettier formatting
      run: yarn format
      
    - name: Run Jest tests
      run: yarn test
      
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      if: always()

  # Job for merges to main - builds APK and stores as artifact
  build-apk:
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'
        
    - name: Install dependencies
      run: yarn install --frozen-lockfile
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 34
        target: android-34
        arch: x86_64
      
    # Setup essential Android build tools
    - name: Setup Android build tools
      run: |
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "build-tools;34.0.0"
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platform-tools"
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-34"
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "platforms;android-35"
        
    # Install the exact NDK version that works locally
    - name: Setup Android NDK
      run: |
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "ndk;27.1.12297006"
        echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/27.1.12297006" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/27.1.12297006" >> $GITHUB_ENV
        
    # Install CMake that matches the NDK version
    - name: Setup CMake
      run: |
        echo "y" | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --install "cmake;3.22.1"
        echo "CMAKE_HOME=$ANDROID_HOME/cmake/3.22.1" >> $GITHUB_ENV
        
    # Set up environment variables to match local working configuration
    - name: Setup environment variables
      run: |
        echo "ANDROID_NDK_HOME=$ANDROID_HOME/ndk/27.1.12297006" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/27.1.12297006" >> $GITHUB_ENV
        echo "CMAKE_HOME=$ANDROID_HOME/cmake/3.22.1" >> $GITHUB_ENV
        echo "PATH=$ANDROID_HOME/ndk/27.1.12297006/toolchains/llvm/prebuilt/linux-x86_64/bin:$ANDROID_HOME/cmake/3.22.1/bin:$PATH" >> $GITHUB_ENV
        
    - name: Verify Android setup
      run: |
        echo "Android SDK: $ANDROID_HOME"
        echo "Build tools installed:"
        ls -la $ANDROID_HOME/build-tools/
        echo "Platforms installed:"
        ls -la $ANDROID_HOME/platforms/
        echo "NDK installed:"
        ls -la $ANDROID_HOME/ndk/
        echo "CMake installed:"
        ls -la $ANDROID_HOME/cmake/
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          $ANDROID_HOME/ndk
          $ANDROID_HOME/cmake
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make Gradlew executable
      run: chmod +x android/gradlew
      
    # Verify gradlew setup
    - name: Verify gradlew setup
      run: |
        echo "Checking gradlew file..."
        ls -la android/gradlew
        echo "Checking if gradlew is executable..."
        if [ -x "android/gradlew" ]; then
          echo "Gradlew is executable"
        else
          echo "Gradlew is not executable, fixing permissions..."
          chmod +x android/gradlew
        fi
        
        echo "Testing gradlew..."
        cd android
        ./gradlew --version || echo "Gradlew test failed"
        cd ..
      
    # Clean and prepare the project
    - name: Clean Android project
      run: |
        echo "Starting Android project cleanup..."
        
        # Try gradlew clean first
        if [ -f "android/gradlew" ] && [ -x "android/gradlew" ]; then
          echo "Using gradlew to clean project..."
          cd android
          ./gradlew clean --no-daemon --stacktrace || echo "Gradlew clean failed, using manual cleanup..."
          cd ..
        fi
        
        # Manual cleanup as fallback
        echo "Performing manual cleanup..."
        rm -rf android/app/build 2>/dev/null || echo "Could not remove app/build"
        rm -rf android/.gradle 2>/dev/null || echo "Could not remove .gradle"
        rm -rf android/build 2>/dev/null || echo "Could not remove build"
        rm -rf android/app/.cxx 2>/dev/null || echo "Could not remove .cxx"
        
        echo "Cleanup completed"
        
    # Generate native code for libraries
    - name: Generate native code
      run: |
        if [ -f "android/gradlew" ]; then
          echo "Generating native code..."
          cd android
          ./gradlew generateCodegenArtifactsFromSchema --no-daemon || echo "Native code generation failed but continuing..."
          cd ..
        else
          echo "Gradlew not found, skipping native code generation"
        fi
        
    # Verify native code generation
    - name: Verify native code generation
      run: |
        echo "Checking if native code directories were generated:"
        ls -la node_modules/lottie-react-native/android/build/generated/source/codegen/jni/ 2>/dev/null || echo "lottie-react-native native code not found"
        ls -la node_modules/react-native-gesture-handler/android/build/generated/source/codegen/jni/ 2>/dev/null || echo "react-native-gesture-handler native code not found"
        ls -la node_modules/react-native-mmkv/android/build/generated/source/codegen/jni/ 2>/dev/null || echo "react-native-mmkv native code not found"
        ls -la node_modules/react-native-pager-view/android/build/generated/source/codegen/jni/ 2>/dev/null || echo "react-native-pager-view native code not found"
        
    - name: Create keystore file
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/keyStore.jks
        echo "keystore file created"
        
    - name: Build signed APK
      run: |
        cd android
        ./gradlew assembleRelease --warning-mode all --no-daemon --stacktrace
      env:
        KEYSTORE_FILE: release.keystore
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        
    - name: Upload signed APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: app-release-signed
        path: android/app/build/outputs/apk/release/app-release.apk
        retention-days: 30
